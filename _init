#!/bin/busybox sh

# Create essential symlinks first thing
/bin/busybox --install -s /bin

# Now mount the virtual filesystems
/bin/busybox mount -t proc none /proc
/bin/busybox mount -t sysfs none /sys
/bin/busybox mount -t devtmpfs none /dev 2>/dev/null
if [ $? -ne 0 ]; then
  echo "Creating basic device nodes manually"
  /bin/busybox mknod -m 666 /dev/null c 1 3
  /bin/busybox mknod -m 666 /dev/zero c 1 5
  /bin/busybox mknod -m 666 /dev/random c 1 8
  /bin/busybox mknod -m 666 /dev/urandom c 1 9
  /bin/busybox mknod -m 666 /dev/tty c 5 0
  /bin/busybox mknod -m 666 /dev/console c 5 1
  /bin/busybox mknod -m 666 /dev/ttyS0 c 4 64
fi

# Set up environment variables
export PATH=/bin:/sbin:/usr/bin:/usr/sbin
export PS1='\u@\h:\w\$ '

# Create basic configuration files
mkdir -p /etc
cat > /etc/passwd << 'EOF'
root::0:0:root:/root:/bin/sh
EOF

cat > /etc/group << 'EOF'
root:x:0:
EOF

# Create home directory for root
mkdir -p /root

# Create /etc/fstab
cat > /etc/fstab << 'EOF'
proc        /proc     proc     defaults     0     0
sysfs       /sys      sysfs    defaults     0     0
devtmpfs    /dev      devtmpfs defaults     0     0
EOF

# Set up hostname
hostname kernel_prog

# Setup loopback interface
ifconfig lo up 2>/dev/null

echo "=== Boot Complete ==="
echo "Welcome to your kernel_prog Linux system"

# Mount the proper console for job control
mkdir -p /dev/pts
mount -t devpts devpts /dev/pts -o gid=5,mode=0620

# Start a proper interactive shell with job control
# setsid cttyhack sh

exec /bin/sh